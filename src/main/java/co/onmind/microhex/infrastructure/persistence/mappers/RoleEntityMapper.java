package co.onmind.microhex.infrastructure.persistence.mappers;

import co.onmind.microhex.domain.models.Role;
import co.onmind.microhex.infrastructure.persistence.entities.RoleEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;

/**
 * MapStruct mapper for converting between Role domain models and RoleEntity JPA entities.
 * 
 * This mapper handles the conversion between the domain layer and the persistence layer,
 * ensuring clean separation of concerns in the hexagonal architecture.
 * 
 * @author OnMind (Cesar Andres Arcila Buitrago)
 * @version 1.0.0
 */
@Mapper(componentModel = "spring")
public interface RoleEntityMapper {
    
    RoleEntityMapper INSTANCE = Mappers.getMapper(RoleEntityMapper.class);
    
    /**
     * Converts a RoleEntity to Role domain model.
     * @param entity the JPA entity
     * @return the domain model
     */
    @Mapping(target = "withName", ignore = true)
    Role toDomain(RoleEntity entity);
    
    /**
     * Converts a Role domain model to RoleEntity.
     * @param role the domain model
     * @return the JPA entity
     */
    RoleEntity toEntity(Role role);
    
    /**
     * Converts a Role domain model to a new RoleEntity (ignoring ID).
     * Used when creating new entities where the ID should be generated by the database.
     * @param role the domain model
     * @return the JPA entity without ID
     */
    @Mapping(target = "id", ignore = true)
    RoleEntity toNewEntity(Role role);
    
    /**
     * Converts a list of RoleEntity to a list of Role domain models.
     * @param entities the list of JPA entities
     * @return the list of domain models
     */
    List<Role> toDomainList(List<RoleEntity> entities);
    

}