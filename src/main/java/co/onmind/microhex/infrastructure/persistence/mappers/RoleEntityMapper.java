package co.onmind.microhex.infrastructure.persistence.mappers;

import co.onmind.microhex.domain.models.Role;
import co.onmind.microhex.infrastructure.persistence.entities.RoleEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;

import java.util.List;

/**
 * MapStruct mapper for converting between Role domain model and RoleEntity.
 * 
 * This mapper handles the conversion between the domain model (Role) and
 * the persistence entity (RoleEntity). It uses MapStruct to generate
 * efficient mapping code at compile time.
 * 
 * The mapper is configured as a Spring component to be automatically
 * injected where needed.
 * 
 * @author OnMind (Cesar Andres Arcila Buitrago)
 * @version 1.0.0
 */
@Mapper(
    componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE
)
public interface RoleEntityMapper {
    
    /**
     * Converts a Role domain model to RoleEntity.
     * 
     * This method maps all fields from the domain model to the entity.
     * The mapping is straightforward as both objects have the same structure.
     * 
     * @param role The domain model to convert
     * @return The corresponding entity, or null if input is null
     */
    RoleEntity toEntity(Role role);
    
    /**
     * Converts a RoleEntity to Role domain model.
     * 
     * This method maps all fields from the entity to the domain model.
     * The mapping preserves all data including the ID and timestamps.
     * 
     * @param entity The entity to convert
     * @return The corresponding domain model, or null if input is null
     */
    Role toDomain(RoleEntity entity);
    
    /**
     * Converts a list of RoleEntity to a list of Role domain models.
     * 
     * This method provides bulk conversion functionality for collections.
     * It's commonly used when retrieving multiple entities from the database.
     * 
     * @param entities The list of entities to convert
     * @return The corresponding list of domain models
     */
    List<Role> toDomainList(List<RoleEntity> entities);
    
    /**
     * Updates an existing RoleEntity with data from a Role domain model.
     * 
     * This method is useful for update operations where you want to
     * preserve the entity's managed state while updating its fields.
     * Only non-null values from the source will be mapped.
     * 
     * @param role The source domain model with updated data
     * @param target The target entity to update
     */
    @Mapping(target = "id", ignore = true) // Don't update the ID
    void updateEntityFromDomain(Role role, @MappingTarget RoleEntity target);
    
    /**
     * Creates a new RoleEntity from a Role domain model, ignoring the ID.
     * 
     * This method is specifically designed for creating new entities
     * where the ID should be generated by the database.
     * 
     * @param role The domain model to convert
     * @return A new entity without ID set
     */
    @Mapping(target = "id", ignore = true)
    RoleEntity toNewEntity(Role role);
}